#!/bin/bash

# Copyright 2015 Olivier van Helden <olivier@van-helden.net>
# Released under GNU Affero GPL v3.0 license
#    http://www.gnu.org/licenses/agpl-3.0.html

DefaultLogDir=/opt/opensim/var/logs

DELAY=60
shutdownDelay=120
shutdownWarnings=3
DEBUG=yes

# End of user configurable data

BASEDIR=$(dirname $(dirname $(realpath "$0")))
. $BASEDIR/lib/os-helpers || exit 1
[ "$OSBIN" ] || exit 1
[ "$ETC" ] || exit 1

trap 'rm -f $TMP*' EXIT

HELP="
  $PGM <start|stop [now]|restart [now]> [instance1] [instance2] [...]
  $PGM status

      -h display this help
      -v verbose mode
      -q quiet mode"


OPTS="shvq"
while getopts $OPTS PARAM
do
    case $PARAM in
	"?")
	    ERROR=1
	        ;;
	-)
	    case $OPTARG in
		help)
		    help
		    end
		    ;;
		*)
		    printf "$PGM: illegal option -- $OPTARG"
#    ERROR=1
	    esac
	    ;;
	s)
	    action=start
	    ;;
	h)
	    help
	    end
	    ;;
	v)
	    STDERR="&1"
            DEBUG=yes
	    QUIET=no
	    ;;
	q)
	    STDOUT="/dev/null"
	    QUIET=yes
	    DEBUG=no
	    ;;
	*)
	    VALUES="$VALUES $PARAM"
	    LASTVAL=$PARAM
    esac

done 2>/dev/null
shift `expr $OPTIND - 1`

#ini_parser="$(which ini_parser)"
#[ -n "$ini_parser" ] || end 1 no ini parser
#log "ini_parser: $ini_parser"
. "$(which ini_parser)" || end 2 could not launch ini parser

startSim() {
  unset IFS
  for arg in $@
  do
	ls -d "$arg" 2>/dev/null | grep -q "\.ini$" \
	    && { inifile=$arg; instance=$(basename $arg .ini | tr "[:upper:]" "[:lower:]"); } \
	    || { instance=$(echo $arg | tr "[:upper:]" "[:lower:]"); inifile=$(buildIni "$instance"); }

	[ ! -e "$inifile" ] && continue

	instance=$(echo "$instance" | sed "s/[^a-zA-Z]*//g")

	log "$instance ($ini)"

	screen -ls | egrep -q "[0-9][0-9]*\.$instance[[:blank:]]"
	if [ $? -eq 0 ]
		then
		log 1 "An instance of $instance is already running"
		continue
	fi

	for default in $(echo "$ETCPATH:" | sed "s|/*:|/default.ini |g")
	do
	    [ -f "$default" ] || continue
	    ini_parser "$default" || continue
	    ini_section_Const 2>/dev/null
	    ini_section_Startup 2>/dev/null
	    ini_section_Launch 2>/dev/null
	done
	log "BinDir: $BinDir"
	log extracting launch info from $inifile file

	cat "$inifile" | sed '/\[Const]/,/^\[/!d' | sed "$ d" > $TMP.ini
	cat "$inifile" | sed '/\[Launch]/,/^\[/!d' | sed "$ d" >> $TMP.ini
	cat "$inifile" | sed '/\[Startup]/,/^\[/!d' | sed "$ d" >> $TMP.ini
	log reading $inifile file
	ini_parser "$TMP.ini" || continue
	# ini_parser "$inifile" || continue
	#2>/dev/null || continue
	log reading section Launch

	# ini_section_Startup 2>/dev/null
  [ "$Executable" ] \
  || Executable=$(crudget $inifile Launch Executable) \
  && [ "$Executable" ] \
  || end $? could not read Executable value

  log "Executable $Executable"

  ini_section_Const 2>/dev/null && echo "const ok"
  # || end $? reading section Const
	ini_section_Launch 2>/dev/null || end $? reading section Launch
  echo "launch ok"
	log "starting $instance with $inifile"
	cd $BinDir 2>/dev/null || log 2 $instance Cannot cd to $BinDir
	log "BinDir $BinDir"
	[ -f $Executable ] || log 3 Executable $Executable not found

  Include_Common=$(crudget $inifile Includes Include-Common)
  # crudini --get $inifile Includes Include-Common
  LogDirectgory=$(crudget $Include_Common Const LogsDirectory | sed -e "s#\${Launch|SimName}#$instance#g" -e "s#\${Launch|MachineName}#$instance#g")
  log LogsDirectory $LogsDirectory
  [ ! "$LogDirectgory" ] && LogDirectgory=$DefaultLogDir
  [ ! "$LogFile" ] && LogFile="$logfile"
  [ ! "$LogFile" ] && LogFile="$LogsDirectory/$instance.log"

  cmd="mono $Executable -inifile='$inifile'"
  if [ "$Executable" = "Robust.exe" ]
  then
    [ ! "$ConsolePrompt" ] && ConsolePrompt="Robust ($instance) "
    cmd="$cmd -logfile='$LogFile' -prompt '$ConsolePrompt'"
  else
    [ ! "$ConsolePrompt" ] && ConsolePrompt="$instance (\R) "
  fi
  #		LogConfig=${inifile/.ini/.LogConfig}
  log "DataDirectory $DataDirectory"
  log "CacheDirectory $CacheDirectory"

  [ ! "$LogConfig" ] && LogConfig="$DataDirectory/$(basename "$inifile" .ini).LogConfig"
  log "LogConfig $LogConfig"

  if [ ! -f "$LogConfig" ]
  then
    ExecName=$(basename $Executable .exe)
    sed -e "s|[a-zA-Z0-9\./_-]*/*$ExecName.log|$LogDirectory/$instance.log|" \
    -e "s|[a-zA-Z0-9\./_-]*/*${ExecName}Stats.log|$LogDirectory/${instance}.Stats.log|" \
    $BinDir/$(basename $Executable).config >$TMP.logconfig \
    && mv $TMP.logconfig $LogConfig \
    && log created LogConfig file $LogConfig from core model $BinDir/$Executable.config \
    || end $?
    # cd /opt/opensim/var/data/config
    # ln -s $LogConfig 2>/dev/null
  fi

	if [ -f "$LogConfig" ]
	then
    cmd="$cmd -logconfig=$LogConfig"
    LogFile=$(egrep "LogFileAppender|<file" $LogConfig | grep -A1 "LogFileAppender" | head -2 | tail -1 | cut -d '"' -f 2)
    touch $LogFile && log "LogFile $LogFile touched"
	fi

	# touch $TMP.wait
  log "Working directory: $PWD"
	log "launching $instance "
	log "$cmd"
	eval "screen -S $instance -d -m $cmd"
	screen -ls | egrep "[0-9][0-9]*\.$instance[[:blank:]]"

    # TAILTIMEOUT=120
    # log "logfile: $LogFile"
    if [ "$Executable" = "Robust.exe" ]
    then
      osConsoleWait $instance "UserAgentServerConnector loaded successfully" \
      && log "Robust server $instance started" \
      || log "Robust not started after 30 seconds, giving up"
      # TAILTIMEOUT=60
      # timeout $TAILTIMEOUT tailgrep "UserAgentServerConnector loaded successfully" $LogFile \
      # && echo "At least one region started" \
      # || echo "Startup still going on after $TAILTIMEOUT seconds, check again later"
    else
      osConsoleWait 5 $instance "RegionUUID" && osConsole $instance "\n"
      osConsoleWait 1 $instance "Internal IP address" && osConsole $instance "\n"
      osConsoleWait 1 $instance "External host name" && osConsole $instance "\n"
      osConsoleWait 1 $instance "Do you wish to join region .* to an existing estate" && osConsole $instance "\n" \
      && osConsoleWait 1 $instance "Name of estate to join." && osConsole $instance "\n"

      osConsoleWait 120 $instance "neighbours.*region.*is up|loaded successfully|LOAD REGIONS PLUGIN]: Done" \
      && log "Simulator $instance started" \
      || log $? "Simulator $instance not started after 60 seconds, giving up"
      #
      # echo timeout $TAILTIMEOUT tailgrep "neighbours.*region.*is up" $LogFile
      # timeout $TAILTIMEOUT tailgrep "neighbours.*region.*is up|loaded successfully" $LogFile \
      # && echo "At least one region started" \
      # || echo "Startup still going on after $TAILTIMEOUT seconds, check again later"
    fi
  done
}

stopSim() {
  [ "$1" ] && sims=$@ || sims=$(enabledIni opensim robust)
  for sim in $sims
  do
    simName=$(ini2Name $sim)
    ls -d "$sim" 2>/dev/null | grep -q "\.ini$" \
  	    && { inifile=$sim; instance=$(basename $sim .ini | tr "[:upper:]" "[:lower:]"); } \
  	    || { instance=$(echo $sim | tr "[:upper:]" "[:lower:]"); inifile=$(buildIni "$sim"); }

  	cat "$inifile" | sed '/\[Const]/,/^\[/!d' | sed "$ d" > $TMP.ini
  	cat "$inifile" | sed '/\[Launch]/,/^\[/!d' | sed "$ d" >> $TMP.ini
  	cat "$inifile" | sed '/\[Startup]/,/^\[/!d' | sed "$ d" >> $TMP.ini
  	ini_parser "$TMP.ini" || continue
  	# ini_parser "$inifile" || continue
  	#2>/dev/null || continue
  	# ini_section_Startup 2>/dev/null
  	ini_section_Const 2>/dev/null
  	ini_section_Launch 2>/dev/null

    if [ "$Executable" = "OpenSim.exe" ]
    then
      log notiy users in $simName
      warnDelay=$(($shutdownDelay / $shutdownWarnings))
      warn=0
      [ $shutdownDelay -le 10 ] && shutdownWarnings=1
      [ $shutdownDelay -eq 0 ] && shutdownWarnings=0
      while [ $warn -lt $shutdownWarnings ]
      do
        remaining=$(($shutdownDelay - $warn * $warnDelay))
        log " $remaining seconds left"
        osConsole $simName "alert Attention: this simulator will be stopped in $remaining seconds. Please teleport to another region to avoid being disconnected."
        sleep $warnDelay
        warn=$(($warn + 1))
      done
      osConsole $simName "alert Shutting down now."
    fi
    log shutting down $simName
    osConsole $simName shutdown
    screen -x $simName
  done
}

restartSim() {
  [ "$1" ] && sims="$@" || sims=$(enabledIni robust opensim)
  for sim in $sims
  do
    simName=$(ini2Name $sim)
    echo restart $simName
    stopSim $simName
    startSim $simName
  done
}

ini2Name() {
  [ ! "$1" ] && return "no-name"
  ini=$1
  [ -f "$1" ] && name=$(egrep "^[[:blank:]]SimName *=" $ini)
  [ ! $name ] && name=$(basename $ini .ini | tr [:upper:] [:lower:])
  echo $name
}
enabledIni() {
  [ "$1" ] && types=$@ || types="robust opensim"
  for type in $types
  do
    case $type in
      robust)
      ls "$etc"/robust.d/*.ini 2>/dev/null | sort -n
      ls "$etc"/robust-enabled/*.ini 2>/dev/null | sort -n
      ;;
      opensim)
      ls "$etc"/opensim.d/*.ini 2>/dev/null | sort -n
      ls "$etc"/simulators-enabled/*.ini 2>/dev/null | sort -n
      ;;
    esac
  done
}


buildIni() {
    unset ini
    sim="$@"
    ini=$(
    IFS=":"
    for etc in $ETCPATH
    do
	log "looking in $etc"
	(
	    ls "$etc"/*.d/*.ini 2>/dev/null
	    ls "$etc"/*-enabled/*.ini 2>/dev/null
	) | grep -i "/$sim.ini$" && break
#	lookup="$etc/simulators-enabled/$sim.ini"
#	log "looking for $lookup"
#	[ -f "$lookup" ] || continue
#	log "gotcha $lookup"
#	ini="$lookup"
#	break
    done | head -1
    )

    if [ ! -n "$ini" ]
    then
	log 1 "no ini file found for $sim"
	continue
    fi
    log "$sim ini $ini"
    echo "$ini"
}

cleanpath() {
    IFS=:
    printf "" > $TMP.realpath
    for etc in $@
    do
	real=$(realpath "$etc")
#	echo path $etc >&2
#	echo real $real >&2
	[ ! -d "$real" ] && continue
	grep -q "^$real$" $TMP.realpath && continue
	echo "$real" >> $TMP.realpath
    done
    unset IFS

    newpath=$(cat $TMP.realpath | tr "\n" ":" | sed "s/:$//")
    rm "$TMP.realpath"
    echo $newpath
}

status() {
    ps -C mono -o  pid,uname,pcpu,pmem,rss,args --sort=-pcpu,pmem \
	| grep -v mcs\.exe \
	| sed "s/mono.*inifile=//" \
	| sed "s/-log.*//" \
	| tee $TMP.usage
    ucpu=0
    umem=0
    cat $TMP.usage | grep -v PID \
	| awk '{count+=1; cpu += $3; mem += $4; rss += $5} END {print "TOTAL\n" count "\tprocesses\n" cpu "\t% cpu\n" mem "\t% mem\n" rss "\trss"}'
    return
    #e | grep -v "PID" | cut -f 1 | paste -sd+
    printf "" | sed "s/\.//g"  \
	| while read pid user cpu mem command
	  do
	      ucpu=$(($ucpu + $cpu))
	      umem=$(($umem + $mem))
	  done
    echo "cpu usage: $ucpu"
    echo "mem usage: $umem"
}

B="[[:blank:]]*"

getRobustPath() {
    IFS=:
    for etc in $ETCPATH
    do
	unset IFS
	for ini in $(
	    egrep -li "^[[:blank:]]*Executable[[:blank:]]*=[[:blank:]]*Robust.exe[[:blank:]]*$" "$etc"/*-enabled/*.ini 2>/dev/null | sort -n
	    ls "$etc"/default.ini 2>/dev/null
	)
	do
	    egrep "^${B}BinDir${B}=" "$ini";
	done
    done | head -1 | sed "s/^[[:blank:]]*BinDir[[:blank:]]*=[[:blank:]]*//"
    unset IFS
}

ETCPATH=$(cleanpath "$ETCPATH")

#getRobustPath
#end

log looking in $ETC

IFS=":"
for etc in $ETC $ETCPATH
do
    folder=$(realpath "$etc")
    [ "$folder" ] || continue
    echo ":$LOOKUP:" | grep -q ":$folder:" && log "ignoring duplicate $etc" && continue
    LOOKUP="$LOOKUP:$folder" && continue
done
unset IFS
LOOKUP="$(echo $LOOKUP | sed "s/^:*//")"

if [ ! -n "$LOOKUP" ]
then
    end 1 "No valid folder found in $ETCPATH"
fi
ETCPATH=$LOOKUP
log "ETCPATH: $ETCPATH"

case "$1" in
  "help")
    help
    end ""
    ;;
  "start")
    action=$1
    shift
    ;;
  "stop")
    action=$1
    shift
    [ "$1" = "now" ] && shutdownDelay=0 && shift
    stopSim "$@"
    ;;
  "restart")
    action=$1
    shift
    [ "$1" = "now" ] && shutdownDelay=0 && shift
    restartSim "$@"
    ;;
  "status")
    action=$1
    shift
    ;;
esac

case $action in
    status)
	status
	;;
	start)
	if [ -n "$1" ]
	then
	    startSim "$@"
	else
	    log Starting all
	    IFS=:
	    for etc in $ETCPATH
	    do
		unset IFS
		for ini in $(
      ls "$etc"/robust.d/*.ini 2>/dev/null | sort -n
      ls "$etc"/robust-enabled/*.ini 2>/dev/null | sort -n
      ls "$etc"/opensim.d/*.ini 2>/dev/null | sort -n
			ls "$etc"/simulators-enabled/*.ini 2>/dev/null | sort -n
			)
		do
		    [ -f "$TMP.wait" -a "$DELAY" ] && read -p "waiting $DELAY seconds between instances " -t $DELAY
		    rm -f "$TMP.wait"
		    startSim "$ini"
		done
	    done
	    unset IFS
	fi
	;;
    connections)
	;;
esac
