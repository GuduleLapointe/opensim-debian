#!/bin/bash

export PATH=$PATH:$(dirname $(dirname "$0"))/bin

BASEDIR=$(dirname $(dirname $(realpath "$0")))
. $BASEDIR/lib/os-helpers || exit 1
[ "$OSBIN" ] || exit 1
[ "$ETC" ] || exit 1

PGM=$(basename "$0")
TMP=/tmp/$PGM.$$

[ "$1" ] && gridname="$@"
readvar gridname && [ "${gridname}" != "" ] || end $? "gridname cannot be empty"

gridnick=$(echo $gridname | tr "[:upper:]" "[:lower:]" | sed -r -e 's/(\W)/\L\1/g' -e 's/[^[:alnum:] _-]//g' -e 's/(^|[ _-])(\w)/\U\2/g')
readvar gridnick && [ "${gridnick}" != "" ] || end $? "gridnick cannot be empty"

BinDir=$(ls -drt /opt/opensim/core/opensim-[0-9]*/bin | sort | tail -1)
readvar BinDir && [ "${BinDir}" != "" ] || end $? "BinDir cannot be empty"
ls -d "$BinDir" >/dev/null || end $?

BaseHostname=$(hostname -f)
readvar BaseHostname && [ "${BaseHostname}" != "" ] || end $? "BaseHostname cannot be empty"
# readvar BaseHostname && [ "${BaseHostname}" != "" ] || end $? "BaseHostname cannot be empty"

(
find . $DATA/regions $DATA/*/regions -name "*.ini" 2>/dev/null \
  | grep -v "#" \
  | xargs egrep "^[[:blank:];]*(InternalPort|PublicPort|PrivatePort|http_listener_port)[[:blank:]]*=" 2>/dev/null \
  | cut -d "=" -f 2 | sed "s/[^0-9]//g"
netstat -tulpn 2>/dev/null | grep LISTEN | sed -r -e "s/^[^:]*[0-9]*:+//" -e "s/[[:blank:]].*//"
) | sort -u | sort -n >> $TMP.inuse

PublicPort=$(nextfreeports 8002)
readvar PublicPort && [ "${PublicPort}" != "" ] || end $? "PublicPort cannot be empty"
grep -q "^$PublicPort$" $TMP.inuse && end 1 "Port $PublicPort is already in use"
echo $PublicPort >> $TMP.inuse

PrivatePort=$(nextfreeports -e $PublicPort 8003)
readvar PrivatePort && [ "${PrivatePort}" != "" ] || end $? "PrivatePort cannot be empty"
grep -q "^$PrivatePort$" $TMP.inuse && end 1 "Port $PrivatePort is already in use"
echo $PrivatePort >> $TMP.inuse

WebURL="https://$BaseHostname"
read -p "WebURL: [$WebURL] "

Executable="Robust.exe"
LogConfig="/opt/opensim/var/data/$gridnick/Robust.exe.config"
LogFile="/opt/opensim/var/logs/$gridnick.log"

GridDir=$ETC/grids/${gridnick}
readvar GridDir && [ "${GridDir}" != "" ] || end $? "GridDir cannot be empty"
[ -d "$GridDir" ] || mkdir "$GridDir" || end $?

RobustOutput=$GridDir/Robust.HG.ini
readvar RobustOutput && [ "${RobustOutput}" != "" ] || end $? "RobustOutput cannot be empty"

## Try to get current database credentials
(
grep -l "^[^;]*ConnectionString *=" $ETC/robust.d/*.ini \
| xargs -d "\n" ls -rt
ls -d $RobustOutput 2>/dev/null
)  | tail -1 | xargs grep "^[^;]*ConnectionString" | head -1 \
| tr " ;" "\n" | grep [a-z].*= > $TMP.db
. $TMP.db || end $?

[ "$Source" != "" ] && db_host=$Source || db_host="localhost"
db_name=$(echo ${gridnick}_robust | tr [:upper:] [:lower:])
[ "$ID"  != "" ] && db_user=$ID || db_user="opensim"
[ "$Password"  != "" ] && db_pass="$Password" || db_pass="password"

readvar db_host && [ "${db_host}" != "" ] || end $? "db_host cannot be empty"
readvar db_name && [ "${db_name}" != "" ] || end $? "db_name cannot be empty"
readvar db_user && [ "${db_user}" != "" ] || end $? "db_user cannot be empty"
readvar db_pass && [ "${db_pass}" != "" ] || end $? "db_pass cannot be empty"

testDatabaseConnection $db_host $db_name $db_user "$db_pass" \
|| end $? "Could not connect to database $db_name with given credentials"

printf "\n$PGM: Building confin\n\n" >&2

cat <<EOF >$TMP.launch.ini
;; Generated by $0 $(date)
[Launch]
  ;; Parameters used by opensim-debian scripts.
  ;; You can safely delete Launch section if you use another launching process
  BinDir = "$BinDir"
  Executable = "Robust.exe"
  LogConfig = "$LogConfig"
  LogFile = "$LogFile"
  ConsolePrompt = "$gridname ($BaseHostname:$PublicPort)"
  ;; End of Launch section

EOF

EtcDirectory="/opt/opensim/etc/grids/$gridnick"
DataDirectory="/opt/opensim/var/data/$gridnick"
CacheDirectory="/opt/opensim/var/cache/$gridnick"
LogsDirectory="/opt/opensim/var/logs"

cat <<EOF >$TMP.thisgrid.ini || end $?
[Const]
  BaseURL = "http://$BaseHostname:$PublicPort"
  WebURL = "$WebURL"
  PublicPort = $PublicPort
  PrivatePort = $PrivatePort
  BinDirectory = "$BinDir"
  EtcDirectory = "$EtcDirectory"
  DataDirectory = "$DataDirectory"
  CacheDirectory = "$CacheDirectory"
  LogsDirectory = "$LogsDirectory"
[Startup]
  PIDFile = "\${Const|CacheDirectory}/$gridnick.Speculoos.pid"
  RegistryLocation = "\${Const|DataDirectory}/Registry"
  ConfigDirectory = "\${Const|EtcDirectory}/robust-include"
  ConsoleHistoryFile = "\${Const|LogsDirectory}/$gridnick.RobustConsoleHistory.txt"
[Hypergrid]
  HomeURI = "\${Const|BaseURL}:\${Const|PublicPort}"
[DatabaseService]
  ConnectionString = "Data Source=$db_host;Database=$db_name;User ID=$db_user;Password=$db_pass;Old Guids=true;"
[AssetService]
  BaseDirectory = "\${Const|DataDirectory}/fsassets/data"
  SpoolDirectory = "\${Const|CacheDirectory}/fsassets/tmp"
  AssetLoaderArgs = "\${Const|EtcDirectory}/assets/AssetSets.xml"
[GridService]
  MapTileDirectory = "\${Const|CacheDirectory}/maptiles"
[LibraryService]
  LibraryName = "W4os Library"
  DefaultLibrary = "\${Const|EtcDirectory}/inventory/Libraries.xml"
[LoginService]
  DestinationGuide = "\${Const|WebURL}/guide"
[MapImageService]
  TilesStoragePath = "\${Const|DataDirectory}/maptiles"
[GridInfoService]
  gridname = "W4OS Demo Grid"
  gridnick = "${gridnick}"
  welcome = "\${Const|WebURL}/splash"
  about = "\${Const|WebURL}/about"
  register = "\${Const|WebURL}/register"
  help = "\${Const|WebURL}/support"
  password = "\${Const|WebURL}/password"
  economy = "\${Const|WebURL}/helpers"
  search = "\${Const|WebURL}/helpers/query.php"
  message = "\${Const|WebURL}/helpers/offline.php"
  GridStatus = "\${Const|WebURL}/GridStatus"
  GridStatusRSS = "\${Const|WebURL}/GridStatusRSS"
[BakedTextureService]
  BaseDirectory = "\${Const|CacheDirectory}/bakes"
EOF

cp $BinDir/Robust.HG.ini.example $TMP.Robust.ini \
&& sed -i "s/^[[:blank:]]*//" $TMP.thisgrid.ini  $TMP.Robust.ini \
&& crudini --merge $TMP.Robust.ini < $TMP.thisgrid.ini \
&& cat $TMP.launch.ini $TMP.Robust.ini > $TMP.ini \
|| exit $?

if [ -f "$RobustOutput" ]
then
  diff "$RobustOutput" $TMP.ini &&
  echo "No change in $RobustOutput" && exit

  if yesno -y "Apply changes?"
  then
    mv $RobustOutput $RobustOutput~ \
    && cp $TMP.ini $RobustOutput \
    && echo "$RobustOutput modified" \
    || end $?
  else
    echo "$RobustOutput left unchanged"
  fi
else
  cp $TMP.ini $RobustOutput \
  && echo "$RobustOutput file created" \
  || end $?
fi

for directory in \
  /opt/opensim/var/ \
  /opt/opensim/var/cache \
  /opt/opensim/var/data \
  $CacheDirectory \
  $CacheDirectory/bakes \
  $CacheDirectory/fsassets \
  $CacheDirectory/fsassets/tmp \
  $CacheDirectory/maptiles \
  $DataDirectory \
  $DataDirectory/fsassets \
  $DataDirectory/fsassets/data \
  $DataDirectory/maptiles \
  $DataDirectory/Registry \
  $EtcDirectory \
  $EtcDirectory/assets \
  $EtcDirectory/grids \
  $EtcDirectory/inventory \
  $EtcDirectory/robust-include \
  $LogsDirectory
do
 [ -e "$directory" ] && cd "$directory" && continue
 mkdir "$directory" && log "created directory $directory" || end $?
done

rm -f $TMP.ini
