#!/bin/bash

[ ! "$OPENSIM" ] && OPENSIM=core/opensim
[ ! "$PGM" ] && PGM=$(basename "$0")
[ ! "$TMP" ] && TMP=/tmp/$PGM.$$

if ! which realpath >/dev/null; then
  realpath() {
    readlink -f "$@" 2>/dev/null && return
    cd "$@" 2>/dev/null && pwd -P && return
  }
fi

# echo ":$PATH:" | grep -q ":$BINDIR:" || export PATH=$PATH:$BINDIR
# [ ! "$LIB" ] && LIB=$BASEDIR/lib
BINDIR=$(dirname $(realpath "$0"))
BASEDIR=$(dirname "$BINDIR")
[ ! "$CONTRIB" ] && CONTRIB=$BASEDIR/contrib
. $CONTRIB/bash-helpers/helpers || echo "$PGM: Missing helpers library, run install.sh"

[ "$1" = "-v" ] && DEBUG=yes && shift
[ "$1" = "-q" ] && DEBUG=no && shift

LIB=$BASEDIR/lib
VAR=$BASEDIR/var
LOGS=$VAR/logs
CACHE=$VAR/cache
DATA=$VAR/data
SRC=$BASEDIR/src
ETC=$BASEDIR/etc

for etc in /etc/opensim $BASEDIR/etc ~/etc/opensim
do
    [ -d "$etc" ] && ETC=$etc || continue
    [ -f "$etc/opensim.conf" ] && . $etc/opensim.conf 2>/dev/null
done

[ -d "$OSBINDIR" ] && OSBIN=$OSBINDIR/bin/OpenSim.exe \
|| OSBIN=$( ls \
$BASEDIR/lib/opensim*/bin/OpenSim.exe \
$BASEDIR/core/opensim*/bin/OpenSim.exe \
$OSBINDIR/bin/OpenSim.exe \
2>/dev/null | tail -1 )

[ "$OSBIN" ] \
&& log "$OSBIN found" && OSBINDIR=$(dirname $OSBIN) && OSDIR=$(dirname $OSBINDIR)\
|| log 1 "OpenSim.exe not found, run install.sh"

osConsole() {
  [ ! "$2" ] && return
  osInstance=$1
  shift
  osCommand="$@"
  [ "$osCommand" = "\n" ] && unset osCommand
  lr=$(printf "\n\b")
  # pre=$(printf "\n\b")
  screen -x $osInstance -X stuff "$(echo "$pre$osCommand$lr")"
}
osConsoleRead() {
  [ ! "$1" ] && return
  [ ! "$COLUMNS" ] && COLUMNS=75
  osInstance=$1; shift
  pattern="$@"
  screen -x $osInstance -X hardcopy -h $TMP.console
  if [ "$pattern" ]
  then
    egrep "$pattern" $TMP.console && return
    printf "\33[2K"
    printf "$(grep . $TMP.console | tail -1 | cut -c -$COLUMNS)\r"
    return 1
  else
    cat $TMP.console | sed "s/^/cat /"
  fi
}
osConsoleWait() {
  [ "$2" ] || return $?
  [ "$3" ] && timeout=$1 && shift || timeOut=60
  osInstance=$1; shift
  pattern="$@"
  [ "$pattern" = "" ] && return 2
  t=0; while [ $t -lt 60 ]
  do
    osConsoleRead $osInstance "$pattern" && return
    sleep 0.5
    t=$(($t + 1))
  done
  # echo
  return 1
}

cleanupIni() {
  [ "$1" ] || return
  [ -f "$1" ] || return
  cat "$1" | sed "s/^[[:blank:]]*//"
}

randomPassword() {
  echo $(< /dev/urandom tr -dc "[:alnum:]" | head -c32)
}

crudget() {
  [ "$2" ] || return $?
  [ -f "$1" ] || return $?
  cleanupIni "$1" | sed "s/Include-/Include_/" > $TMP.get
  if [ "$3" ]
  then
    crudini --get $TMP.get $2 $3 | sed -e 's/^"//' -e  's/"$//'
  else
    eval $(crudini --get --format=sh $TMP.get $2 $3  | sed -e "s/'\"/'/" -e "s/\"'/'/")
  fi
}

crudmerge() {
  [ -f "$2" ] || continue
  log merging $2 in $1
  cleanupIni $2 | sed "s/^Include-/Include_/" > $TMP.merge.ini
  crudini --merge $1 <$TMP.merge.ini || end $? $2 Merge failed
}

cleanupIni4Prod() {
  [ "$1" ] || return
  sed -i "s/Include_/Include-/" $1
  crudini --get $1 > $TMP.sections
  cat $TMP.sections | while read section
  do
    crudini --get $1 $section | grep -qi [a-z] || crudini --del $1 "$section"
  done
}

testDatabaseConnection() {
  [ "$4" ] || return $?
  log "Testing database connection"
  DatabaseHost=$1
  DatabaseName=$2
  DatabaseUser=$3
  DatabasePassword=$4

  echo "" | mysql -h$DatabaseHost -u$DatabaseUser -p"$DatabasePassword" $DatabaseName 2>/dev/null
  if [ $? -ne 0 ]
  then
    echo "" | mysql -h$DatabaseHost -u$DatabaseUser -p"$DatabasePassword" 2>/dev/null
    if [ $? -ne 0 ]
    then
      createDatabaseUser $DatabaseHost $DatabaseUser "$DatabasePassword" || return $?
    fi
    createDatabase $DatabaseHost $DatabaseUser $DatabaseName \
    && echo "" | mysql -h$DatabaseHost -u$DatabaseUser -p$DatabasePassword $DatabaseName \
    && log "Database OK" && return \
    || return $?
  fi
  log "Database Connection OK"
  return
}

createDatabaseUser() {
  [ "$3" ] || return $?
  yesno "Create database user $DatabaseUser on $DatabaseHost?" || return $?
  DatabaseHost=$1
  DatabaseUser=$2
  DatabasePassword=$3
  echo "CREATE USER $DatabaseUser IDENTIFIED BY '$DatabasePassword';" | sudo mysql -h$DatabaseHost 2>/dev/null
  return $?
}

createDatabase() {
  [ "$3" ] || return $?
  yesno "Create database $DatabaseName and grant rights to $DatabaseUser?" || return $?
  DatabaseHost=$1
  DatabaseUser=$2
  DatabaseName=$3
  echo "CREATE DATABASE $DatabaseName character set UTF8;"  | sudo mysql -h$DatabaseHost \
  && echo "GRANT ALL ON $DatabaseName.* TO $DatabaseUser;" | sudo mysql -h$DatabaseHost \
  && echo "set global innodb_large_prefix=on; set global innodb_file_format=Barracuda;" | sudo mysql -h$DatabaseHost  2>/dev/null \
  && log "Database created"
  return $?
}
